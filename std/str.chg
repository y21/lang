use root::std::intrinsics::bitcast;
use root::std::ptr;
use root::std::fatal;
use root::std::fmt::Display;
use root::std::string::String;
use root::std::libc::memcpy;

type StrRepr = root::std::slice::Repr<u8>;
impl str {
  fn from_raw_parts(ptr: u8*, len: u64): str* {
    return bitcast(.{ ptr: ptr, len: len });
  }

  fn as_ptr(self*): u8* {
    let repr: StrRepr = bitcast(self);
    return repr.ptr;
  }

  fn len(self*): u64 {
    let repr: StrRepr = bitcast(self);
    return repr.len;
  }

  fn is_empty(self*): bool {
    return self.len() == 0;
  }

  fn at(self*, index: u64): u8 {
    if index >= self.len() {
      fatal("string index out of bounds");
    }
    return *ptr::add(self.as_ptr(), index);
  }
  
  fn substr_from(self*, from: u64): str* {
    if from > self.len() {
      fatal("string index out of bounds");
    }
    let repr: StrRepr = .{ ptr: ptr::add(self.as_ptr(), from), len: self.len() - from };
    return bitcast(repr);
  }

  fn substr_to(self*, to: u64): str* {
    if to >= self.len() {
      fatal("string index out of bounds");
    }
    let repr: StrRepr = .{ ptr: self.as_ptr(), len: to };
    return bitcast(repr);
  }
  
  
  fn index_of(self*, search: u8): u64 {
    let i = 0;
    while i < self.len() {
        if self.at(i) == search {
            return i;
        }
    }
    return -1;
  }
}

impl Display for str {
  fn to_string(self*): String {
    let out = String::with_capacity(self.len());
    memcpy(ptr::cast::<u8, ()>(out.ptr), ptr::cast::<u8, ()>(self.as_ptr()), self.len());
    out.len = self.len();
    return out;
  }
}

impl Display for str* {
  fn to_string(self*): String {
    return self*.to_string();
  }
}
